// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime? @map("email_verified")
  image         String?
  otp           String?
  passwordUuid  String?
  role          Role      @default(USER)
  provider      String?
  otpExpiresAt  DateTime?
  verified      Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

  // Relations with Tickets
  orders  Order[] // One user â†’ many orders
  tickets Ticket[]

  @@map("users")
}

model FailedLoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  success   Boolean
  userAgent String
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id               Int      @id @default(autoincrement())
  name             String
  slug             String   @unique
  description      String
  organiserEmail   String // for "mailto:"
  organiserContact String // for "tel:"
  startDate        DateTime
  endDate          DateTime
  stock            Int
  price            Float
  image            String
  trending         Boolean  @default(false)
  category         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tickets          Ticket[]
}

model Ticket {
  id         String   @id @default(cuid())
  code       String   @unique // UUID for QR
  quantity   Int // How many total uses
  used       Int      @default(0) // How many times it's been scanned
  eventId    Int
  userId     String
  isExpired  Boolean  @default(false) // Automatically mark when used === quantity
  qrCodeData String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model Order {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tickets   Ticket[]
  total     Float
  reference String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
