generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  phone         String?
  address       String?
  gender        String?
  birthday      DateTime?
  role          Role      @default(USER)
  isOrganizer   Boolean   @default(false)
  profileImage  String?
  resetToken       String? 
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  newsletterSubscriptions  NewsletterSubscription[]
  tickets       Ticket[]
  events        Event[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  securityOfficers SecurityOfficer[]
  passwordResetToken PasswordResetToken?
  
  // NextAuth
  emailVerified DateTime?

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id            String      @id @default(cuid())
  title         String
  description   String?
  category      String
  location      String
  startDate     DateTime
  endDate       DateTime
  mainImage     String?
  price         Float
  totalTickets  Int
  soldTickets   Int         @default(0)
  status        EventStatus @default(UPCOMING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  organizer     User        @relation(fields: [organizerId], references: [id])
  organizerId   String
  tickets       Ticket[]
  orders        Order[]
  images        EventImage[]
  ticketTypes   TicketType[]
  securityOfficers SecurityOfficer[]
  verificationLogs VerificationLog[]

  @@map("events")
}

model TicketType {
  id          String   @id @default(cuid())
  name        String
  price       Float
  quantity    Int
  soldCount   Int      @default(0)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  tickets     Ticket[]

  @@map("ticket_types")
}

model EventImage {
  id        String   @id @default(cuid())
  url       String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("event_images")
}

model Ticket {
  id            String   @id @default(cuid())
  qrCode        String   @db.Text
  type          String   // Standard, VIP, etc.
  price         Float
  isUsed        Boolean  @default(false)
  usedAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  event         Event    @relation(fields: [eventId], references: [id])
  eventId       String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String
  ticketType    TicketType? @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId  String?
  verificationLogs VerificationLog[]

  @@map("tickets")
}

model Order {
  id            String      @id @default(cuid())
  total         Float
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?     // PayStack payment ID
  reference     String?     // PayStack reference
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  event         Event       @relation(fields: [eventId], references: [id])
  eventId       String
  tickets       Ticket[]

  @@map("orders")
}

model SecurityOfficer {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  verificationLogs VerificationLog[]

  @@map("security_officers")
}

model VerificationLog {
  id                String          @id @default(cuid())
  ticketId          String
  securityOfficerId String
  eventId           String
  details            String?         // Additional details about the verification
  action            String          // VERIFIED, MARKED_USED
  timestamp         DateTime        @default(now())
  createdAt         DateTime        @default(now())

  // Relations
  ticket            Ticket          @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  securityOfficer   SecurityOfficer @relation(fields: [securityOfficerId], references: [id], onDelete: Cascade)
  event             Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([securityOfficerId])
  @@index([timestamp])
  @@map("verification_logs")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String  @unique
  token     String
  expires   DateTime
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model About {
  id              String        @id @default(uuid())
  mission         String
  vision          String
  story           String
  founded         Int
  location        String
  teamSize        Int
  eventsHosted    Int
  happyCustomers  Int
  values          String?       
  contactEmail    String
  contactPhone    String
  contactWebsite  String
  teamMembers     TeamMember[]  @relation("AboutTeam")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TeamMember {
  id        String   @id @default(uuid())
  name      String
  role      String
  image     String   
  bio       String
  order     Int
  about     About    @relation("AboutTeam", fields: [aboutId], references: [id])
  aboutId   String
}

model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  ORGANIZER
  SECURITY
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
