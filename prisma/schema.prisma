generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  phone         String?
  address       String?
  gender        String?
  birthday      DateTime?
  role          Role      @default(USER)
  isOrganizer   Boolean   @default(false)
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  tickets       Ticket[]
  events        Event[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  
  // NextAuth
  emailVerified DateTime?

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id            String      @id @default(cuid())
  title         String
  description   String?
  category      String
  location      String
  startDate     DateTime
  endDate       DateTime
  mainImage     String?
  price         Float
  totalTickets  Int
  soldTickets   Int         @default(0)
  status        EventStatus @default(UPCOMING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  organizer     User        @relation(fields: [organizerId], references: [id])
  organizerId   String
  tickets       Ticket[]
  orders        Order[]
  images        EventImage[]

  @@map("events")
}

model EventImage {
  id        String   @id @default(cuid())
  url       String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("event_images")
}

model Ticket {
  id        String   @id @default(cuid())
  qrCode    String   @db.Text
  type      String   // Standard, VIP, etc.
  price     Float
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String

  @@map("tickets")
}

model Order {
  id            String      @id @default(cuid())
  total         Float
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?     // PayStack payment ID
  reference     String?     // PayStack reference
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  event         Event       @relation(fields: [eventId], references: [id])
  eventId       String
  tickets       Ticket[]

  @@map("orders")
}

enum Role {
  USER
  ADMIN
  ORGANIZER
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
